from aiogram import types
from aiogram.utils.markdown import hbold
from db_service import get_new_notifications_number
from config import admins, SPIN_TEXT


def start_keyboard():
    keyboard_1 = types.InlineKeyboardMarkup(row_width=1)
    keyboard_1.add(types.InlineKeyboardButton(text='–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è üëÄ', url='https://bit.ly/3vuvQb8'))
    keyboard_2 = types.InlineKeyboardMarkup(row_width=1)
    keyboard_2.add(types.InlineKeyboardButton(text='–Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω (-–∞), –º–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç üîû', callback_data='ready_to_start'))
    return keyboard_1, keyboard_2


def cancel_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
    return keyboard


def standard_keyboard(user_id):
    # n = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    n = get_new_notifications_number(user_id=user_id)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ('–ò–≥—Ä—ã', '–ë–∞–ª–∞–Ω—Å', f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({n})', '–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    keyboard.add(*(types.KeyboardButton(text) for text in buttons))
    if user_id in admins:
        keyboard.add(types.KeyboardButton(text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'))
    return keyboard


def balance_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='deposit'))
    keyboard.add(types.InlineKeyboardButton(text='–†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data='referrals'))
    keyboard.add(types.InlineKeyboardButton(text='–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='activate_promocode'))
    keyboard.add(types.InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏', callback_data='withdraw'))
    return keyboard


def support_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text='F.A.Q.', url='https://bit.ly/3xvlDxc'))
    keyboard.add(types.InlineKeyboardButton(text='–ê–¥–º–∏–Ω', url='https://t.me/Crypto_Spin_Admin'))
    keyboard.add(types.InlineKeyboardButton(text='–†–µ–∫–ª–∞–º–∞', url='https://t.me/Crypto_Spin_Adv'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–∞—à Telegram –∫–∞–Ω–∞–ª', url='https://t.me/Crypto_Spin_Official'))
    keyboard.add(types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª', url='https://t.me/joinchat/i0cBUMHENjRiODAy'))
    return keyboard


def admin_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ('–í—ã–≤–æ–¥—ã', '–ü—Ä–æ–º–æ–∫–æ–¥—ã', '–†–µ—Ñ. —Å—Å—ã–ª–∫–∏', '–†–∞—Å—Å—ã–ª–∫–∏', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã', '–í—ã—Ö–æ–¥')
    keyboard.add(*(types.KeyboardButton(text) for text in buttons))
    return keyboard


def statistics_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = ('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ –¥–Ω—è–º', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '–ù–∞–∑–∞–¥')
    keyboard.add(*(types.KeyboardButton(text) for text in buttons))
    return keyboard


def mailing_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = ('–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏', '–ù–∞–∑–∞–¥')
    keyboard.add(*(types.KeyboardButton(text) for text in buttons))
    return keyboard


def mailing_media_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    buttons = ('–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤', '–û—Ç–º–µ–Ω–∞')
    keyboard.add(*(types.KeyboardButton(text) for text in buttons))
    return keyboard


def mailing_inline_keyboard(mailing):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É', callback_data=f"mailing-edit_{mailing['mailing_id']}")
    # btn2 = types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f"mailing-edit_{mailing['mailing_id']}")
    btn3 = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f"mailing-delete_{mailing['mailing_id']}")
    keyboard.row(btn1, btn3)
    # keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='play_joe'))
    return keyboard


def platform_stat_message(stats):
    text = f"–î–∞—Ç–∞: {stats['date']}\n" \
           f"–ë–∞–ª–∞–Ω—Å: {stats['balance']}$\n" \
           f"__________\n" \
           f"–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {stats['deposits_sum']}$\n" \
           f"N –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π:{stats['deposits_number']}\n" \
           f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['deposits_average']}$\n" \
           f"–í—ã–≤–æ–¥—ã: {stats['withdraws_sum']}$\n" \
           f"N –≤—ã–≤–æ–¥–æ–≤: {stats['withdraws_number']}\n" \
           f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['withdraws_average']}$\n" \
           f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {stats['net_profit']}$\n" \
           f"__________\n" \
           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n" \
           f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {stats['registrations_number']}\n" \
           f"–£–¥–∞–ª–µ–Ω–∏–π: {stats['deletes_number']}\n" \
           f"–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['new_users']}\n" \
           f"–î–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—Ç–µ: {stats['actions_number']}\n" \
           f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
    return text


def user_stat_message(user):
    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_name']}:\n" \
           f"ID: {user['user_id']}\n" \
           f"–ë–∞–ª–∞–Ω—Å: {user['balance']}$\n" \
           f"–°—Ç—Ä–∞—Ö–æ–≤–∫–∞: {user['insurance']}$\n" \
           f"___________\n" \
           f"–ü–æ–ø–æ–ª–Ω–∏–ª —Å—É–º–º—É: {user['deposit_total']}$\n" \
           f"–í—ã–≤–µ–ª —Å—É–º–º—É: {user['withdraw_total']}$\n" \
           f"___________\n" \
           f"–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referrals']}\n" \
           f"–°—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user['referral_bonus']}$\n" \
           f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user['referral_code']}\n" \
           f"___________\n" \
           f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user['registration_date']}\n"
    return text


def promocodes_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', '–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã', '–ù–∞–∑–∞–¥')
    keyboard.add(*(types.KeyboardButton(text) for text in buttons))
    return keyboard


def channels_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ('–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ. —Å—Å—ã–ª–∫—É', '–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∏', '–ù–∞–∑–∞–¥')
    keyboard.add(*(types.KeyboardButton(text) for text in buttons))
    return keyboard


def deposit_method_keyboard(user_id: int, amount: float):
    """

    :param user_id: int
    :param amount: float
    :return: keyboard
    """
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text='QIWI ($/‚ÇΩ)', callback_data=f'deposit_{user_id}_qiwi_{amount}'))
    keyboard.add(types.InlineKeyboardButton(text='–ö—Ä–∏–ø—Ç–∞', callback_data=f'deposit_{user_id}_crypto_{amount}'))
    return keyboard


def withdraw_method_keyboard(user_id: int, amount: float):
    """

    :param user_id: int
    :param amount: float
    :return: keyboard
    """
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text='VISA/MasterCard', callback_data=f'withdraw_{user_id}_card_{amount}'))
    keyboard.add(types.InlineKeyboardButton(text='–ö—Ä–∏–ø—Ç–∞', callback_data=f'crypto-withdraw_{user_id}_{amount}'))
    return keyboard


def crypto_withdraw_keyboard(user_id: int, amount: float):
    # BTC, ETH, USDC, DAI, BCH, LTC, DOGE
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text='BTC', callback_data=f'withdraw_{user_id}_btc_{amount}'))
    keyboard.add(types.InlineKeyboardButton(text='ETH', callback_data=f'withdraw_{user_id}_eth_{amount}'))
    keyboard.add(types.InlineKeyboardButton(text='USDC', callback_data=f'withdraw_{user_id}_usdc_{amount}'))
    keyboard.add(types.InlineKeyboardButton(text='DAI', callback_data=f'withdraw_{user_id}_dai_{amount}'))
    keyboard.add(types.InlineKeyboardButton(text='BCH', callback_data=f'withdraw_{user_id}_bch_{amount}'))
    keyboard.add(types.InlineKeyboardButton(text='LTC', callback_data=f'withdraw_{user_id}_ltc_{amount}'))
    keyboard.add(types.InlineKeyboardButton(text='DOGE', callback_data=f'withdraw_{user_id}_doge_{amount}'))
    return keyboard


def withdraw_accept_keyboard(withdraw_id):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'accept-withdraw-yes_{withdraw_id}')
    btn2 = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'accept-withdraw-no_{withdraw_id}')
    keyboard.row(btn1, btn2)
    return keyboard


def games_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text='–û–¥–Ω–æ—Ä—É–∫–∏–π –î–∂–æ', callback_data='play_joe'))
    return keyboard


def joe_keyboard(stake):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False, row_width=3)
    keyboard.add(types.KeyboardButton(text=SPIN_TEXT))
    buttons = ('‚¨Ö', f'–°—Ç–∞–≤–∫–∞ ({stake})', '‚û°')
    keyboard.add(*(types.KeyboardButton(text) for text in buttons))
    keyboard.add(types.KeyboardButton(text='Max —Å—Ç–∞–≤–∫–∞'))
    keyboard.add(types.KeyboardButton(text='–í—ã—Ö–æ–¥'))
    return keyboard


def stake_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    btn1 = types.InlineKeyboardButton(text='100$', callback_data='stake_100')
    btn2 = types.InlineKeyboardButton(text='75$', callback_data='stake_75')
    btn3 = types.InlineKeyboardButton(text='50$', callback_data='stake_50')
    btn4 = types.InlineKeyboardButton(text='25$', callback_data='stake_25')
    btn5 = types.InlineKeyboardButton(text='10$', callback_data='stake_10')
    btn6 = types.InlineKeyboardButton(text='5$', callback_data='stake_5')
    btn7 = types.InlineKeyboardButton(text='0.75$', callback_data='stake_0.75')
    btn8 = types.InlineKeyboardButton(text='0.5$', callback_data='stake_0.5')
    btn9 = types.InlineKeyboardButton(text='0.25$', callback_data='stake_0.25')
    btn10 = types.InlineKeyboardButton(text='0.1$', callback_data='stake_0.1')
    btn11 = types.InlineKeyboardButton(text='0.05$', callback_data='stake_0.05')
    btn12 = types.InlineKeyboardButton(text='0.01$', callback_data='stake_0.01')
    keyboard.row(btn1, btn2, btn3)
    keyboard.row(btn4, btn5, btn6)
    keyboard.row(btn7, btn8, btn9)
    keyboard.row(btn10, btn11, btn12)
    # keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='play_joe'))
    return keyboard


def spin_keyboard():
    # noinspection PyTypeChecker
    return types.ReplyKeyboardMarkup([["üé∞"]], resize_keyboard=True)


def joe_message(balance, promo_balance, result, insurance):
    return f"{hbold('–í–∞—à —Å—á—ë—Ç: ')}{balance}$\n{hbold('–ë–∞–ª–∞–Ω—Å —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ')}{promo_balance}$\n" \
           f"{hbold('–†–µ–∑—É–ª—å—Ç–∞—Ç: ')}{result}$\n{hbold('–°—Ç—Ä–∞—Ö–æ–≤–∫–∞: ')}{insurance}$\n" \
           f"________________\n" \
           f"{hbold('Bar Bar Bar')} ‚Äì {hbold('x5')}\n" \
           f"7Ô∏è‚É£ 7Ô∏è‚É£ 7Ô∏è‚É£ ‚Äì {hbold('x3')}\n" \
           f"üçãüçãüçã  ‚Äì {hbold('x2')}\n" \
           f"üçíüçíüçí ‚Äì {hbold('x2')}  \n"
